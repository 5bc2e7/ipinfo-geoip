# 工作流名称
name: Build Custom GeoIP and IP-List Files

# 工作流触发条件
on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: "0 0 * * 4" # 每周四 UTC 时间 0 点运行
  push:
    branches:
      - master # master 分支有 push 时触发
    paths:
      - '.github/workflows/build.yml' # 仅当工作流文件本身变化时触发

jobs:
  build:
    name: Build Singapore GeoIP DAT and TXT Files
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出 Loyalsoldier/geoip 的代码
      - name: Checkout geoip tool codebase
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/geoip
          path: ./geoip-tool

      # 步骤2：设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./geoip-tool/go.mod

      # 步骤3：设置动态变量
      - name: Set dynamic variables
        run: |
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        shell: bash

      # 步骤4：下载 IPinfo 的 MMDB 数据库文件
      - name: Download IPinfo Lite MMDB
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          mkdir -p ./data
          curl -fL "https://ipinfo.io/data/ipinfo_lite.mmdb?token=${IPINFO_TOKEN}" -o ./data/ipinfo_lite.mmdb

      # 步骤5：安装 IPinfo CLI
      - name: Install IPinfo CLI
        run: |
          go install github.com/ipinfo/cli/ipinfo@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      # 步骤6：从 MMDB 提取并分流 SG 的 IP 地址段 (最终健壮版)
      - name: Extract and Split SG IP Ranges from MMDB
        id: extract_ips
        run: |
          # 最终解决方案：在将数据送入 awk 之前，使用 `tr -d '\r'` 命令。
          # 这个命令会删除掉数据流中所有的回车符 (`\r`)，
          # 从而解决了因 Windows/Linux 换行符不一致导致的字符串匹配失败问题。
          # 这是解决跨平台文本处理问题的标准做法。
          ipinfo mmdb export ./data/ipinfo_lite.mmdb | tr -d '\r' | \
          awk '
          BEGIN { FS = "," }
          NR == 1 {
              for (i=1; i<=NF; i++) {
                  if ($i == "country_code") { cc_idx = i }
                  if ($i == "range") { range_idx = i }
              }
              next
          }
          $(cc_idx) == "SG" { print $(range_idx) }
          ' > ./sg_cidrs_all.txt
 
          if [ -s ./sg_cidrs_all.txt ]; then
            grep '\.' ./sg_cidrs_all.txt > ./sg_cidrs_ipv4.txt
            grep ':' ./sg_cidrs_all.txt > ./sg_cidrs_ipv6.txt
            
            echo "✅ Successfully extracted $(wc -l < ./sg_cidrs_all.txt) total ranges."
            echo "  - $(wc -l < ./sg_cidrs_ipv4.txt) IPv4 ranges."
            echo "  - $(wc -l < ./sg_cidrs_ipv6.txt) IPv6 ranges."
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not find any SG IP ranges. Skipping file generation."
            echo "has_files=false" >> $GITHUB_OUTPUT
          fi
          
      # 步骤7：生成三个版本的 DAT 文件
      - name: Generate DAT files
        if: steps.extract_ips.outputs.has_files == 'true'
        working-directory: ./geoip-tool
        run: |
          go build ./
          cat <<EOF > ./config.json
          {
            "input": [
              { "type": "text", "action": "add", "args": { "name": "sg", "uri": "${{ github.workspace }}/sg_cidrs_all.txt" } },
              { "type": "text", "action": "add", "args": { "name": "sg_ipv4", "uri": "${{ github.workspace }}/sg_cidrs_ipv4.txt" } },
              { "type": "text", "action": "add", "args": { "name": "sg_ipv6", "uri": "${{ github.workspace }}/sg_cidrs_ipv6.txt" } }
            ],
            "output": [
              { "type": "v2rayGeoIPDat", "action": "output", "args": { "outputDir": "${{ github.workspace }}/output", "outputName": "geoip-sg.dat", "wantedList": ["sg"] } },
              { "type": "v2rayGeoIPDat", "action": "output", "args": { "outputDir": "${{ github.workspace }}/output", "outputName": "geoip-sg-ipv4.dat", "wantedList": ["sg_ipv4"] } },
              { "type": "v2rayGeoIPDat", "action": "output", "args": { "outputDir": "${{ github.workspace }}/output", "outputName": "geoip-sg-ipv6.dat", "wantedList": ["sg_ipv6"] } }
            ]
          }
          EOF
          mkdir -p ${{ github.workspace }}/output
          ./geoip convert -c ./config.json
          echo "✅ All DAT conversions completed successfully!"

      # --- 新增步骤 ---
      # 步骤8：准备 .txt 文件用于发布
      - name: Prepare text files for publishing
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          echo "Moving source .txt files to output directory..."
          mv ./sg_cidrs_*.txt ./output/

      # --- 改造步骤 ---
      # 步骤9：为所有产物 (.dat 和 .txt) 创建校验和
      - name: Generate sha256 checksums
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          cd ./output
          # 为 .dat 和 .txt 文件都创建校验和
          for name in $(ls *.dat *.txt); do
            sha256sum ${name} > ./${name}.sha256sum
          done
          echo "Generated files and checksums:"
          ls -l

      # 步骤10：将生成的产物推送到 release 分支
      - name: Git push assets to "release" branch
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          cd ./output
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add -A
          git commit -m "Release: ${{ env.RELEASE_NAME }}"
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      # 步骤11：刷新 jsDelivr CDN 缓存
      - name: Purge jsdelivr CDN
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          cd ./output
          for file in $(ls); do
            echo "Purging ${file} from jsDelivr..."
            curl -sL "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done

      # 步骤12：上传产物到 GitHub Release
      - name: Upload files to GitHub Release
        if: steps.extract_ips.outputs.has_files == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./output/*
          file_glob: true
          release_name: ${{ env.RELEASE_NAME }}
          tag: ${{ env.TAG_NAME }}
          overwrite: true
