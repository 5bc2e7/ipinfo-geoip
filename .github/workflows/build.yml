# 工作流名称
name: Build geoip files
 
# 工作流触发条件
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 4"
  push:
    branches:
      - master
    paths-ignore:
      - ".gitignore"
      - "LICENSE*"
      - "*.md"
 
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
 
      # 步骤2：设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
 
      # 步骤3：设置动态变量
      - name: Set variables
        run: |
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release ${{ env.TAG_NAME }}" >> $GITHUB_ENV
        shell: bash
 
      # 步骤4：下载 IPinfo 的 MMDB 数据库文件
      - name: Download IPinfo Lite MMDB
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          mkdir -p ./ipinfo_data
          curl -fL "https://ipinfo.io/data/ipinfo_lite.mmdb?token=${IPINFO_TOKEN}" -o ./ipinfo_data/ipinfo_lite.mmdb
 
      # 步骤5：校验下载文件的 SHA256 值
      - name: Verify MMDB Checksum
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          echo "Verifying checksum..."
          sudo apt-get update > /dev/null && sudo apt-get install -y jq
          REMOTE_SHA256=$(curl -sL "https://ipinfo.io/data/ipinfo_lite.mmdb/checksums?token=${IPINFO_TOKEN}" | jq -r '.checksums.sha256')
          LOCAL_SHA256=$(sha256sum ./ipinfo_data/ipinfo_lite.mmdb | awk '{print $1}')
          if [ "${REMOTE_SHA256}" != "${LOCAL_SHA256}" ]; then
            echo "❌ Checksum FAILED!" && exit 1
          fi
          echo "✅ Checksum successful."
 
      # --- 核心改动开始 ---
 
      # 步骤6：安装 IPinfo 官方命令行工具 (CLI)
      - name: Install IPinfo CLI
        run: |
          go install github.com/ipinfo/cli/ipinfo@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
 
      # 步骤7：从 MMDB 提取新加坡 (SG) 的 IP 地址段
      - name: Extract SG IP Ranges from MMDB
        id: extract_ips
        run: |
          echo "Extracting SG IPv4 and IPv6 ranges using IPinfo CLI..."
          # 使用 ipinfo cli 导出，通过 awk 筛选出 sg 的 country_code, 并提取第一列 (range)
          # awk -F, '$3=="SG"{print $1}' 过滤国家代码为 SG 的行并打印 IP 段
          ipinfo mmdb export ./ipinfo_data/ipinfo_lite.mmdb | awk -F, 'NR > 1 && $3=="SG" {print $1}' > ./sg_cidrs.txt
          
          # 检查是否成功生成了 cidr 文件且文件不为空
          if [ -s ./sg_cidrs.txt ]; then
            echo "✅ Successfully extracted $(wc -l < ./sg_cidrs.txt) IP ranges to sg_cidrs.txt."
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not find any SG IP ranges in the MMDB. Skipping dat file generation."
            echo "has_files=false" >> $GITHUB_OUTPUT
          fi
 
      # 步骤8：使用 v2fly/geoip 工具将文本IP列表转换为 dat 文件
      # 仅在 extract_ips 步骤成功提取到 IP 时运行
      - name: Generate dat file from text list
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          # 编译 v2fly/geoip 工具
          go build ./
          # 使用 include 指令来从文本文件加载 IP 列表，并将其标记为 "sg"
          # 这是从文本生成带标签的 geoip.dat 的标准方法
          ./geoip -dat-file ./sg_cidrs.txt -country-code sg -output-file ./output/geoip-sg.dat
 
      # --- 核心改动结束 ---
 
      # 步骤9：为生成的 dat 文件创建校验和
      # 仅在成功提取到 IP 时运行
      - name: Generate sha256 checksum for dat files
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          cd ./output
          for name in $(ls *.dat); do
            sha256sum ${name} > ./${name}.sha256sum
          done
 
      # 步骤10：将生成的产物推送到 release 分支
      # 仅在成功提取到 IP 时运行
      - name: Git push assets to "release" branch
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          cd output
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add -A
          git commit -m "Release: ${{ env.RELEASE_NAME }}"
          git remote add geoip "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u geoip release
 
      # 步骤11：刷新 jsDelivr CDN 缓存
      # 仅在成功提取到 IP 时运行
      - name: Purge jsdelivr CDN
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          cd output
          for file in $(ls); do
            curl -sL "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done
 
      # 步骤12：上传产物到 GitHub Release
      # 仅在成功提取到 IP 时运行
      - name: Upload files to GitHub Release
        if: steps.extract_ips.outputs.has_files == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ./output/*
          release_name: ${{ env.RELEASE_NAME }}
          tag: ${{ env.TAG_NAME }}
