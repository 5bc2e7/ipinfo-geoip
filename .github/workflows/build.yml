name: Build geoip files
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 4"
  push:
    branches:
      - master
    paths-ignore:
      - ".gitignore"
      - "LICENSE*"
      - "*.md"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod

      - name: Set variables
        run: |
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        shell: bash

      # --- MaxMind 下载步骤已被注释掉 ---
      # - name: Download GeoLite2 databases
      #   env:
      #     LICENSE_KEY: ${{ secrets.MAXMIND_GEOLITE2_LICENSE }}
      #   run: |
      #     mkdir -p output
      #     curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN&license_key=${LICENSE_KEY}&suffix=tar.gz" -o ./output/GeoLite2-ASN.tar.gz
      #     curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN-CSV&license_key=${LICENSE_KEY}&suffix=zip" -o ./output/GeoLite2-ASN-CSV.zip
      #     curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=${LICENSE_KEY}&suffix=tar.gz" -o ./output/GeoLite2-Country.tar.gz
      #     curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country-CSV&license_key=${LICENSE_KEY}&suffix=zip" -o ./output/GeoLite2-Country-CSV.zip

      # --- MaxMind 准备步骤已被注释掉 ---
      # - name: Prepare GeoLite2 databases
      #   run: |
      #     cp ./output/{*.gz,*.zip} ./
      #     unzip GeoLite2-Country-CSV.zip
      #     unzip GeoLite2-ASN-CSV.zip
      #     tar -xvzf GeoLite2-Country.tar.gz
      #     tar -xvzf GeoLite2-ASN.tar.gz
      #
      #     cp GeoLite2-Country_*/*.mmdb ./output/
      #     cp GeoLite2-ASN_*/*.mmdb ./output/
      #     cp GeoLite2-Country-CSV_*/{GeoLite2-Country-Blocks-*,GeoLite2-Country-Locations-en,GeoLite2-Country-Locations-zh-CN}.csv ./output/
      #     cp GeoLite2-ASN-CSV_*/*.csv ./output/
      #
      #     mkdir -p geolite2
      #     cp GeoLite2-Country-CSV_*/*.csv ./geolite2/
      #     cp GeoLite2-ASN-CSV_*/*.csv ./geolite2/

      - name: Build geoip files
        run: |
          go build ./
          # 确保你的 config.json 文件是精简版的，不依赖任何 MaxMind 文件
          ./geoip convert -c ./config.json

      # --- .mmdb 文件验证步骤已被注释掉，因为我们不生成它 ---
      # - name: Verify mmdb files
      #   run: |
      #     cd ./output || exit 1
      #     go install -v github.com/maxmind/mmdbverify@latest
      #     for name in $(ls *.mmdb); do
      #       $(go env GOPATH)/bin/mmdbverify -file ${name}
      #     done

      - name: Generate sha256 checksum for dat files
        run: |
          # 如果 output 目录或 .dat 文件不存在，则跳过此步骤
          if [ ! -d "./output" ] || [ -z "$(ls -A ./output/*.dat 2>/dev/null)" ]; then
            echo "No .dat files found, skipping checksum generation."
            exit 0
          fi
          cd ./output || exit 1
          for name in $(ls *.dat); do
            sha256sum ${name} > ./${name}.sha256sum
          done

      # --- .mmdb 文件校验和步骤已被注释掉 ---
      # - name: Generate sha256 checksum for mmdb files
      #   run: |
      #     cd ./output || exit 1
      #     for name in $(ls *.mmdb); do
      #       sha256sum ${name} > ./${name}.sha256sum
      #     done

      - name: Git push assets to "release" branch
        run: |
          cd output || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add -A
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add geoip "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u geoip release

      - name: Purge jsdelivr CDN
        run: |
          cd output || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done

      # --- 清理步骤已被简化，因为不再有 MaxMind 文件 ---
      - name: Remove some files to avoid publishing to GitHub release
        run: |
          # 这个步骤可以保留，以防万一有其他不需要发布的文件生成
          # 但主要目标是确保 output 目录是干净的，只包含你想要发布的文件
          echo "Cleanup step, can be customized if needed."

      - name: Upload files to GitHub release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ./output/*
          release_name: ${{ env.RELEASE_NAME }}
          tag: ${{ env.TAG_NAME }}

