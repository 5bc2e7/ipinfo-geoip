# ==============================================================================
#  工作流名称: 构建自定义 GeoIP 和 IP 列表文件
# ==============================================================================
name: Build Custom GeoIP and IP-List Files

# ==============================================================================
#  工作流触发条件
# ==============================================================================
on:
  # 允许在 GitHub Actions 页面手动触发
  workflow_dispatch:

  # 定时触发：每周四 UTC 时间 0 点 (北京时间上午8点) 运行
  schedule:
    - cron: "0 0 * * 4"

  # 推送触发：当 master 分支有代码推送，且变动文件是本工作流文件时触发
  push:
    branches:
      - master
    paths:
      - '.github/workflows/build.yml'

# ==============================================================================
#  工作流任务 (Jobs)
# ==============================================================================
jobs:
  build:
    # Job 的名称
    name: Build Multi-Country GeoIP DAT and TXT Files
    # Job 的运行环境
    runs-on: ubuntu-latest
    
    # --------------------------------------------------------------------------
    #  核心配置: 在这里定义所有需要处理的国家/地区代码，用空格隔开。
    #  未来想增加或删除国家，只需修改下面这一行！
    #  例如: COUNTRIES: "SG HK JP US"
    # --------------------------------------------------------------------------
    env:
      COUNTRIES: "SG HK"

    steps:
      # --------------------------------------------------------------------------
      #  步骤 1: 检出工具代码
      # --------------------------------------------------------------------------
      - name: Checkout geoip tool codebase
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/geoip
          path: ./geoip-tool

      # --------------------------------------------------------------------------
      #  步骤 2: 设置 Go 语言环境
      # --------------------------------------------------------------------------
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./geoip-tool/go.mod

      # --------------------------------------------------------------------------
      #  步骤 3: 设置动态变量 (用于 Release 名称)
      # --------------------------------------------------------------------------
      - name: Set dynamic variables
        run: |
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        shell: bash

      # --------------------------------------------------------------------------
      #  步骤 4: 下载、校验并解压源数据
      # --------------------------------------------------------------------------
      - name: Download, Verify and Unzip IPinfo Lite CSV
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          mkdir -p ./data
          echo "Downloading ipinfo_lite.csv.gz..."
          curl -fL "https://ipinfo.io/data/ipinfo_lite.csv.gz?token=${IPINFO_TOKEN}" -o ./data/ipinfo_lite.csv.gz
          echo "Downloading checksums..."
          curl -sfL "https://ipinfo.io/data/ipinfo_lite.csv.gz/checksums?token=${IPINFO_TOKEN}" -o ./data/checksums.json
          echo "Verifying file integrity..."
          official_sha256=$(jq -r '.checksums.sha256' ./data/checksums.json)
          local_sha256=$(sha256sum ./data/ipinfo_lite.csv.gz | awk '{print $1}')
          echo "Official SHA256: ${official_sha256}"
          echo "Local SHA256:    ${local_sha256}"
          if [ "${official_sha256}" != "${local_sha256}" ]; then
            echo "FATAL: Checksum mismatch! The downloaded file may be corrupted."
            exit 1
          fi
          echo "✅ Checksum match. Unzipping the file..."
          gunzip < ./data/ipinfo_lite.csv.gz > ./data/ipinfo_lite.csv
          
      # --------------------------------------------------------------------------
      #  步骤 5: 循环提取所有指定国家的 IP 地址段
      # --------------------------------------------------------------------------
      - name: Extract and Split IP Ranges for All Countries
        id: extract_ips
        run: |
          HAS_ANY_FILES=false
          for country_code in ${COUNTRIES}; do
            echo "--- Processing for country: ${country_code} ---"
            lc_country_code=$(echo "${country_code}" | tr '[:upper:]' '[:lower:]')
            
            cat ./data/ipinfo_lite.csv | \
            awk -v cc_filter="${country_code}" '
            BEGIN { FS = "," }
            NR == 1 {
                for (i=1; i<=NF; i++) {
                    header_field = $i; gsub(/"|\r/, "", header_field)
                    if (header_field == "country_code") { cc_idx = i }
                    if (header_field == "network") { network_idx = i }
                }
                if (cc_idx == 0 || network_idx == 0) { exit 1 }
                next
            }
            {
                country_code_field = $(cc_idx); gsub(/"|\r/, "", country_code_field)
                if (country_code_field == cc_filter) {
                    network = $(network_idx); gsub(/"|\r/, "", network)
                    print network
                }
            }
            ' > ./${lc_country_code}_cidrs_all.txt
            
            if [ -s ./${lc_country_code}_cidrs_all.txt ]; then
              HAS_ANY_FILES=true
              grep '\.' ./${lc_country_code}_cidrs_all.txt > ./${lc_country_code}_cidrs_ipv4.txt
              grep ':' ./${lc_country_code}_cidrs_all.txt > ./${lc_country_code}_cidrs_ipv6.txt
              echo "✅ Successfully extracted $(wc -l < ./${lc_country_code}_cidrs_all.txt) ranges for ${country_code}."
            else
              echo "⚠️ Could not find any IP ranges for ${country_code}."
              rm ./${lc_country_code}_cidrs_all.txt
            fi
          done
          
          if [ "${HAS_ANY_FILES}" = "true" ]; then
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_files=false" >> $GITHUB_OUTPUT
          fi

      # --------------------------------------------------------------------------
      #  步骤 6: 动态生成 DAT 文件
      # --------------------------------------------------------------------------
      - name: Generate DAT files
        if: steps.extract_ips.outputs.has_files == 'true'
        working-directory: ./geoip-tool
        run: |
          go build ./
          CONFIG_JSON='{"input": [], "output": []}'
          
          for country_code in ${COUNTRIES}; do
            lc_country_code=$(echo "${country_code}" | tr '[:upper:]' '[:lower:]')
            if [ -f "${{ github.workspace }}/${lc_country_code}_cidrs_all.txt" ]; then
              echo "--- Generating config for ${country_code} ---"
              CONFIG_JSON=$(echo "${CONFIG_JSON}" | jq \
                --arg lc_code "${lc_country_code}" \
                --arg ws_path "${{ github.workspace }}" \
                '.input += [
                  {"type": "text", "action": "add", "args": {"name": $lc_code, "uri": "\($ws_path)/\($lc_code)_cidrs_all.txt"}},
                  {"type": "text", "action": "add", "args": {"name": "\($lc_code)_ipv4", "uri": "\($ws_path)/\($lc_code)_cidrs_ipv4.txt"}},
                  {"type": "text", "action": "add", "args": {"name": "\($lc_code)_ipv6", "uri": "\($ws_path)/\($lc_code)_cidrs_ipv6.txt"}}
                ] | .output += [
                  {"type": "v2rayGeoIPDat", "action": "output", "args": {"outputDir": "\($ws_path)/output", "outputName": "geoip-\($lc_code).dat", "wantedList": [$lc_code]}},
                  {"type": "v2rayGeoIPDat", "action": "output", "args": {"outputDir": "\($ws_path)/output", "outputName": "geoip-\($lc_code)-ipv4.dat", "wantedList": ["\($lc_code)_ipv4"]}},
                  {"type": "v2rayGeoIPDat", "action": "output", "args": {"outputDir": "\($ws_path)/output", "outputName": "geoip-\($lc_code)-ipv6.dat", "wantedList": ["\($lc_code)_ipv6"]}}
                ]')
            fi
          done
          
          echo "${CONFIG_JSON}" | jq . > ./config.json
          echo "Generated config.json:"
          cat ./config.json
          
          mkdir -p ${{ github.workspace }}/output
          ./geoip convert -c ./config.json
          echo "✅ All DAT conversions completed successfully!"

      # --------------------------------------------------------------------------
      #  步骤 7: 准备 .txt 文件用于发布
      # --------------------------------------------------------------------------
      - name: Prepare text files for publishing
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          mv ./*_cidrs_*.txt ./output/

      # --------------------------------------------------------------------------
      #  步骤 8: 为所有产物创建校验和
      # --------------------------------------------------------------------------
      - name: Generate sha256 checksums
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          cd ./output
          for name in $(ls *.dat *.txt); do
            sha256sum ${name} > ./${name}.sha256sum
          done
          echo "Generated files and checksums:"
          ls -l

      # --------------------------------------------------------------------------
      #  步骤 9: 推送产物到 release 分支 (用于 CDN)
      # --------------------------------------------------------------------------
      - name: Git push assets to "release" branch
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          cd ./output
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add -A
          git commit -m "Release: ${{ env.RELEASE_NAME }}"
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      # --------------------------------------------------------------------------
      #  步骤 10: 刷新 jsDelivr CDN 缓存
      # --------------------------------------------------------------------------
      - name: Purge jsdelivr CDN
        if: steps.extract_ips.outputs.has_files == 'true'
        run: |
          cd ./output
          for file in $(ls); do
            echo "Purging ${file} from jsDelivr..."
            curl -sL "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done

      # --------------------------------------------------------------------------
      #  步骤 11: 上传产物到 GitHub Release
      # --------------------------------------------------------------------------
      - name: Upload files to GitHub Release
        if: steps.extract_ips.outputs.has_files == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./output/*
          file_glob: true
          release_name: ${{ env.RELEASE_NAME }}
          tag: ${{ env.TAG_NAME }}
          overwrite: true

