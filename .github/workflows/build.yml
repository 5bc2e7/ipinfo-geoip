# 工作流名称
name: Build geoip files

# 工作流触发条件
on:
  # 允许手动触发
  workflow_dispatch:
  # 定时触发：每周四的 UTC 时间 0点0分 (北京时间上午8点)
  schedule:
    - cron: "0 0 * * 4"
  # 当 master 分支有代码推送时触发
  push:
    branches:
      - master
    # 忽略以下文件的变更，避免不必要的构建
    paths-ignore:
      - ".gitignore"
      - "LICENSE*"
      - "*.md"

# 定义任务
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          # 获取所有历史记录，以便 git 操作
          fetch-depth: 0

      # 步骤2：设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod

      # 步骤3：设置动态变量 (发布名称和标签)
      - name: Set variables
        run: |
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release ${{ env.TAG_NAME }}" >> $GITHUB_ENV
        shell: bash

      # 步骤4：下载 IPinfo 的 MMDB 数据库文件
      - name: Download IPinfo Lite MMDB
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          mkdir -p ./ipinfo_data
          curl -fL "https://ipinfo.io/data/ipinfo_lite.mmdb?token=${IPINFO_TOKEN}" -o ./ipinfo_data/ipinfo_lite.mmdb

      # 步骤5：校验下载文件的 SHA256 值
      - name: Verify MMDB Checksum
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          echo "Verifying checksum of the downloaded MMDB file..."
          # 安装 jq 工具用于解析 JSON
          sudo apt-get update > /dev/null && sudo apt-get install -y jq
          # 从 API 获取官方的 SHA256 校验和
          REMOTE_SHA256=$(curl -sL "https://ipinfo.io/data/ipinfo_lite.mmdb/checksums?token=${IPINFO_TOKEN}" | jq -r '.checksums.sha256')
          # 计算本地下载文件的 SHA256 校验和
          LOCAL_SHA256=$(sha256sum ./ipinfo_data/ipinfo_lite.mmdb | awk '{print $1}')
          
          echo "Official SHA256: ${REMOTE_SHA256}"
          echo "Local    SHA256: ${LOCAL_SHA256}"
          
          # 比较两个校验和，如果不一致则中止工作流
          if [ "${REMOTE_SHA256}" != "${LOCAL_SHA256}" ]; then
            echo "❌ Checksum verification FAILED!"
            exit 1
          fi
          echo "✅ Checksum verification successful."

      # 步骤6：编译并运行工具以生成 dat 文件
      - name: Build and generate dat files
        run: |
          go build ./
          ./geoip convert -c ./config.json

      # --- 核心优化点 ---
      # 步骤7：检查是否成功生成了文件，并设置一个输出变量
      - name: Check for generated files
        id: check_files # 为此步骤设置一个 ID，方便后续引用
        run: |
          if [ -d "./output" ] && [ -n "$(ls -A ./output/*.dat 2>/dev/null)" ]; then
            echo "✅ Found generated .dat files in ./output."
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No .dat files were generated. Skipping subsequent steps."
            echo "has_files=false" >> $GITHUB_OUTPUT
          fi

      # 步骤8：为生成的 dat 文件创建校验和
      # 仅在 check_files 步骤的输出 has_files 为 'true' 时运行
      - name: Generate sha256 checksum for dat files
        if: steps.check_files.outputs.has_files == 'true'
        run: |
          cd ./output
          for name in $(ls *.dat); do
            sha256sum ${name} > ./${name}.sha256sum
          done

      # 步骤9：将生成的产物推送到 release 分支
      # 仅在 check_files 步骤的输出 has_files 为 'true' 时运行
      - name: Git push assets to "release" branch
        if: steps.check_files.outputs.has_files == 'true'
        run: |
          cd output
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add -A
          git commit -m "Release: ${{ env.RELEASE_NAME }}"
          git remote add geoip "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u geoip release

      # 步骤10：刷新 jsDelivr CDN 缓存
      # 仅在 check_files 步骤的输出 has_files 为 'true' 时运行
      - name: Purge jsdelivr CDN
        if: steps.check_files.outputs.has_files == 'true'
        run: |
          cd output
          for file in $(ls); do
            curl -sL "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done

      # 步骤11：上传产物到 GitHub Release
      # 仅在 check_files 步骤的输出 has_files 为 'true' 时运行
      - name: Upload files to GitHub Release
        if: steps.check_files.outputs.has_files == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ./output/*
          release_name: ${{ env.RELEASE_NAME }}
          tag: ${{ env.TAG_NAME }}
